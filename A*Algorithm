def astar(start, goal):
    from heapq import heappush, heappop
    open_list = []
    heappush(open_list, (0, start))
    came_from = {}
    g = {start: 0}
    while open_list:
        _, current = heappop(open_list)
        if current == goal:
            path = [current]
            while current in came_from:
                current = came_from[current]
                path.append(current)
            return path[::-1]
        for dx, dy in [(0,1),(1,0),(-1,0),(0,-1)]:
            neighbor = (current[0]+dx, current[1]+dy)
            if 0 <= neighbor[0] < 5 and 0 <= neighbor[1] < 5:  # Grid bounds
                new_cost = g[current] + 1
                if neighbor not in g or new_cost < g[neighbor]:
                    g[neighbor] = new_cost
                    f = new_cost + abs(neighbor[0]-goal[0]) + abs(neighbor[1]-goal[1])
                    heappush(open_list, (f, neighbor))
                    came_from[neighbor] = current
path = astar((0, 0), (4, 4))
print("Path:", path)
